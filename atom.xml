<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niro | 逆。</title>
  
  <subtitle>逆。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirodu.com/"/>
  <updated>2018-10-19T07:35:28.787Z</updated>
  <id>https://nirodu.com/</id>
  
  <author>
    <name>NiroDu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IIFE</title>
    <link href="https://nirodu.com/201808/IIFE/"/>
    <id>https://nirodu.com/201808/IIFE/</id>
    <published>2018-08-26T09:28:51.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>在这里简单的说一说 IIFE (Immediately Invoked Function Expressions)，立即调用函数表达式。<br>立即调用函数表达式，也称自执行函数。<br><a id="more"></a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.</p></blockquote><blockquote><p>It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts. The first is the anonymous function with lexical scope enclosed within the Grouping Operator (). This prevents accessing variables within the IIFE idiom as well as polluting the global scope.<br>The second part creates the immediately executing function expression () through which the JavaScript engine will directly interpret the function.</p></blockquote><h2 id="IIFE-参数问题"><a href="#IIFE-参数问题" class="headerlink" title="IIFE 参数问题"></a>IIFE 参数问题</h2><p>先看下面一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line">(<span class="function">(<span class="params">global, $</span>) =&gt;</span> &#123;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)(<span class="built_in">window</span>, jQuery);</span><br></pre></td></tr></table></figure></p><p>这个例子引发了我的一点疑问：1、为什么要把<code>window</code>和<code>jQuery</code>分别作为对象<code>global</code>和<code>$</code>传入到自执行函数里呢，作用是什么？</p><p>查了查资料，解了疑惑。<br>把<code>window</code>作为对象<code>global</code>传入的目的是将本是全局对象的<code>window</code>，注入IIFE中，便成了IIFE的局部变量<code>global</code>。<br>在有需要调用<code>window</code>对象的属性时，直接从局部变量<code>global</code>调用，不需要沿着scope chain（作用域链）一级级返回到顶层作用域<code>window</code>去，这样可以更快的访问<code>window</code>。<br>而将<code>jQuery</code>作为对象<code>$</code>传入，则是可以保证在这个IIFE内<code>$</code>就是<code>jquery</code>而不是其他类似使用<code>$</code>符号的库，避免冲突。</p><h2 id="正确的IIFE写法"><a href="#正确的IIFE写法" class="headerlink" title="正确的IIFE写法"></a>正确的IIFE写法</h2><p>再看一个例子：<br>请解释下面代码为什么不能用作 IIFE：<code>function foo(){ }();</code> ，需要作出哪些修改才能使其成为 IIFE？</p><p>JavaScript 解析器将 <code>function foo(){ }();</code> 解析成 <code>function foo(){ }</code> 和 <code>();</code> 。<br>其中，前者是函数声明；后者（一对括号）是试图调用一个函数，却没有指定名称，因此它会抛出 Uncaught SyntaxError: Unexpected token ) 的错误。<br>应做如下修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改1：</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; &#125;)();</span><br><span class="line"><span class="comment">// 修改2：</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; &#125;());</span><br><span class="line"><span class="comment">// 修改3 ES6：</span></span><br><span class="line">(foo() =&gt; &#123; &#125;)(); <span class="comment">// With ES6 arrow functions (though parentheses only allowed on outside)</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" target="_blank" rel="noopener">IIFE - MDN Web Docs Glossary: Definitions of Web-related terms | MDN</a><br><a href="http://lucybain.com/blog/2014/immediately-invoked-function-expression/" target="_blank" rel="noopener">Lucy | JS Immediately Invoked Function Expressions</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里简单的说一说 IIFE (Immediately Invoked Function Expressions)，立即调用函数表达式。&lt;br&gt;立即调用函数表达式，也称自执行函数。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>年会项目小记</title>
    <link href="https://nirodu.com/201805/%E5%B9%B4%E4%BC%9A%E9%A1%B9%E7%9B%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://nirodu.com/201805/年会项目小记/</id>
    <published>2018-05-20T08:02:38.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>公司的年会项目，也借此机会进阶了一把。<br>技术涉及到 Node/express/socket.io/docker/负载均衡</p><a id="more"></a><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p>为什么前端需要node？因为有很多种语言都可以去操作系统，现在的理解是，以JS的大一统方式，去实现浏览器环境以外的操作（例如写爬虫，或是进行系统级别的操作）。</p><p><a href="https://nodejs.org/dist/latest-v8.x/docs/api/" target="_blank" rel="noopener">Node.js v8.11.2 Documentation</a><br><a href="https://nodejs.org/dist/latest-v10.x/docs/api/" target="_blank" rel="noopener">Node.js v10.1.0 Documentation</a></p><h1 id="express-Koa"><a href="#express-Koa" class="headerlink" title="express/Koa"></a>express/Koa</h1><p><a href="https://koajs.com/" target="_blank" rel="noopener">Koa - next generation web framework for node.js</a><br><a href="http://expressjs.com/" target="_blank" rel="noopener">Express - Node.js Web 应用程序框架</a></p><h1 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h1><p><a href="https://socket.io/docs/" target="_blank" rel="noopener">Socket.IO  —  Docs</a></p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker Documentation</a><br><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程 - 阮一峰的网络日志</a><br><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">前言 · Docker —— 从入门到实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的年会项目，也借此机会进阶了一把。&lt;br&gt;技术涉及到 Node/express/socket.io/docker/负载均衡&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://nirodu.com/201712/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://nirodu.com/201712/Git常用命令/</id>
    <published>2017-12-22T07:11:21.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">我对这这篇文章暂时加密了，正在打磨出炉，请期待：）</h3><div id="security"> <div> <input type="text" placeholder="请输入密码，假如你知道：）" id="pass" style="width:300px;height:30px;padding:0;padding-left:20px;box-sizing:border-box;border-width:1px;border-color:#ddd;border-style:solid;outline:none;-webkit-appearance:none;vertical-align:middle;"> <button type="button" onclick="decryptAES()" style="width:130px;height:30px;box-sizing:border-box;border-width:1px;border-color:#ddd;border-style:solid;outline:none;-webkit-appearance:none;padding:0;vertical-align:middle;"> 我知道密码</button> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      我对这这篇文章暂时加密了，正在打磨出炉，请期待：）&lt;/br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>defer/async 和 DOMContentLoaded/load小记</title>
    <link href="https://nirodu.com/201711/defer-async%E5%92%8CDOMContentLoaded-load%E5%B0%8F%E8%AE%B0/"/>
    <id>https://nirodu.com/201711/defer-async和DOMContentLoaded-load小记/</id>
    <published>2017-11-03T06:55:47.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="defer和async的区别"><a href="#defer和async的区别" class="headerlink" title="defer和async的区别"></a>defer和async的区别</h2><p><img src="/img/deferAsync/1.jpg" alt="1"><br><em>蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。</em></p><p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code><br>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><p><code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code><br>有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p><p><code>&lt;script defer src=&quot;myscript.js&quot;&gt;&lt;/script&gt;</code><br>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p><h2 id="事件DOMContentLoaded和load的区别"><a href="#事件DOMContentLoaded和load的区别" class="headerlink" title="事件DOMContentLoaded和load的区别"></a>事件DOMContentLoaded和load的区别</h2><p><strong>DOM文档加载的步骤为:</strong><br>1.解析HTML结构。<br>2.加载外部脚本和样式表文件。<br>3.解析并执行脚本代码。<br>4.DOM树构建完成。//DOMContentLoaded<br>5.加载图片等外部文件。<br>6.页面加载完毕。//load</p><p>在第4步，会触发DOMContentLoaded事件。在第6步，触发load事件。</p><blockquote><p>当初始HTML文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架完成加载。另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 在使用 DOMContentLoaded 更加合适的情况下使用 load 是一个非常流行的错误，所以要谨慎。  ——MDN</p></blockquote><p>用原生js可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不兼容老的浏览器，兼容写法见 [jQuery中ready与load事件](http://www.imooc.com/code/3253) ，或用jQuery</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"DOM fully loaded and parsed"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"All resources finished loading!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JQ这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOMContentLoaded</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load</span></span><br><span class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://ued.ctrip.com/blog/script-defer-and-async.html#" target="_blank" rel="noopener">script的defer和async – 携程设计委员会</a></li><li><a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="noopener">defer和async的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;defer和async的区别&quot;&gt;&lt;a href=&quot;#defer和async的区别&quot; class=&quot;headerlink&quot; title=&quot;defer和async的区别&quot;&gt;&lt;/a&gt;defer和async的区别&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/deferAs
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lodash源码写法学习-Array</title>
    <link href="https://nirodu.com/201711/Lodash%E6%BA%90%E7%A0%81%E5%86%99%E6%B3%95%E5%AD%A6%E4%B9%A0-Array/"/>
    <id>https://nirodu.com/201711/Lodash源码写法学习-Array/</id>
    <published>2017-11-02T12:32:24.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="slice-array-start-0-end-array-length"><a href="#slice-array-start-0-end-array-length" class="headerlink" title="_.slice(array, [start=0], [end=array.length])"></a>_.slice(array, [start=0], [end=array.length])</h3><blockquote><p>Creates a slice of array from start up to, but not including, end. (将旧数组按指定的 start 和 end 的位置截取成新数组)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slice</span>(<span class="params">array, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假如length值默认为array.length。</span></span><br><span class="line">  <span class="keyword">let</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length</span><br><span class="line">  <span class="keyword">if</span> (!length) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 假如start值没声明，则默认为0。  </span></span><br><span class="line">  start = start == <span class="literal">null</span> ? <span class="number">0</span> : start</span><br><span class="line">  <span class="comment">// 假如end值没声明，则默认为array.length。  </span></span><br><span class="line">  end = end === <span class="literal">undefined</span> ? length : end</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// start为负数，则start为(length + start)，从尾部开始数起点位置</span></span><br><span class="line">    start = -start &gt; length ? <span class="number">0</span> : (length + start)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// end的值最大为数组的长度</span></span><br><span class="line">  end = end &gt; length ? length : end</span><br><span class="line">  <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// end为负数，则end值为数组长度减去end值</span></span><br><span class="line">    end += length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// start值大于end值则新数组长度为0，否则为 (end - start) &gt;&gt;&gt; 0 保证长度为正值。</span></span><br><span class="line">  length = start &gt; end ? <span class="number">0</span> : ((end - start) &gt;&gt;&gt; <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 保证起点为正值</span></span><br><span class="line">  start &gt;&gt;&gt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length)</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    result[index] = array[index + start]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">// [ 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></p><blockquote><p>疑点 · 斩<br><code>&gt;&gt;&gt;</code> 无符号右移运算符。<br><code>&gt;&gt;&gt;=</code>无符号右移赋值运算符。<br><code>-start</code> 将start的值变成负值。<br><code>start &gt;&gt;&gt;= 0</code> 避免出现NaN问题，start假如是字符串则返回0，可保证start定是正数。</p></blockquote><h3 id="chunk-array-size-1"><a href="#chunk-array-size-1" class="headerlink" title="_.chunk(array, [size=1])"></a><code>_.chunk(array, [size=1])</code></h3><blockquote><p>Creates an array of elements split into groups the length of size. If array can’t be split evenly, the final chunk will be the remaining elements. （指定一个size，将旧数组以该size为长度单位拆分为多个数组，并将其合并成一个新的大数组。若数组不能均匀分割，剩余的元素组成最后一个小数组）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> slice <span class="keyword">from</span> <span class="string">'./slice.js'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, size</span>) </span>&#123;</span><br><span class="line">  size = <span class="built_in">Math</span>.max(size, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length</span><br><span class="line">  <span class="comment">// 假如数组为空或指定的size小于1，则最终返回新的数组为空</span></span><br><span class="line">  <span class="keyword">if</span> (!length || size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> resIndex = <span class="number">0</span></span><br><span class="line">  <span class="comment">//ceil() 方法可对一个数进行上舍入。 例: Math.ceil(7/3)  结果==&gt; 3</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.ceil(length / size))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">    result[resIndex++] = slice(array, index, (index += size))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [ [ 'a', 'b' ], [ 'c', 'd' ] ]</span></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>,<span class="number">3</span>,<span class="string">"haha"</span>,<span class="string">"last chunk"</span>], <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [ [ 'a', 'b', 'c' ], [ 'd', 3, 'haha' ], [ 'last chunk' ] ]</span></span><br></pre></td></tr></table></figure></p><h3 id="compact-array"><a href="#compact-array" class="headerlink" title="_.compact(array)"></a><code>_.compact(array)</code></h3><blockquote><p>Creates an array with all falsey values removed. The values false, null, 0, “”, undefined, and NaN are falsey. (创建一个新数组，并移除旧数组中所有无效的值，如(false, null, 0, “”, undefined, NaN))</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ES6 新增了 for..of 迭代器，它与 for..in 的区别是： 它返回的是值而不是 key</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      result[resIndex++] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure></p><h3 id="difference-array-values-保留"><a href="#difference-array-values-保留" class="headerlink" title="_.difference(array, [values]) (保留)"></a><code>_.difference(array, [values])</code> (保留)</h3><blockquote><p>Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.</p></blockquote><h3 id="differenceBy-array-values-iteratee-identity-保留"><a href="#differenceBy-array-values-iteratee-identity-保留" class="headerlink" title="_.differenceBy(array, [values], [iteratee=_.identity]) (保留)"></a><code>_.differenceBy(array, [values], [iteratee=_.identity])</code> (保留)</h3><blockquote><p>This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they’re compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:</p></blockquote><h3 id="differenceWith-array-values-comparator-保留"><a href="#differenceWith-array-values-comparator-保留" class="headerlink" title="_.differenceWith(array, [values], [comparator]) (保留)"></a><code>_.differenceWith(array, [values], [comparator])</code> (保留)</h3><blockquote><p>This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).</p></blockquote><h3 id="drop-array-n-1"><a href="#drop-array-n-1" class="headerlink" title="_.drop(array, [n=1])"></a><code>_.drop(array, [n=1])</code></h3><blockquote><p>Creates a slice of array with n elements dropped from the beginning. (创建一个从头开始丢弃n个元素的新数组)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> slice <span class="keyword">from</span> <span class="string">'./slice.js'</span></span><br><span class="line"><span class="comment">// 不加参数n则默认为1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">array, n=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length</span><br><span class="line">  <span class="comment">// 用了slice(array, n, array.length)进行裁剪</span></span><br><span class="line">  <span class="keyword">return</span> length</span><br><span class="line">    ? slice(array, n &lt; <span class="number">0</span> ? <span class="number">0</span> : n, length)</span><br><span class="line">    : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [ 3 ]</span></span><br></pre></td></tr></table></figure></p><h3 id="dropRight-array-n-1"><a href="#dropRight-array-n-1" class="headerlink" title="_.dropRight(array, [n=1])"></a><code>_.dropRight(array, [n=1])</code></h3><blockquote><p>Creates a slice of array with n elements dropped from the end. (创建一个从尾部开始丢弃n个元素的新数组)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> slice <span class="keyword">from</span> <span class="string">'./slice.js'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dropRight</span>(<span class="params">array, n=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length</span><br><span class="line">  <span class="comment">// slice(array, 0, -n)进行裁剪</span></span><br><span class="line">  <span class="keyword">return</span> length ? slice(array, <span class="number">0</span>, n &lt; <span class="number">0</span> ? <span class="number">0</span> : -n) : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dropRight([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [ 3 ]</span></span><br></pre></td></tr></table></figure></p><h3 id="dropRightWhile-array-predicate-identity-保留"><a href="#dropRightWhile-array-predicate-identity-保留" class="headerlink" title="_.dropRightWhile(array, [predicate=_.identity]) (保留)"></a><code>_.dropRightWhile(array, [predicate=_.identity])</code> (保留)</h3><blockquote><p>Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array). ()</p></blockquote><h3 id="dropWhile-array-predicate-identity-保留"><a href="#dropWhile-array-predicate-identity-保留" class="headerlink" title="_.dropWhile(array, [predicate=_.identity]) (保留)"></a><code>_.dropWhile(array, [predicate=_.identity])</code> (保留)</h3><blockquote><p>Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).</p></blockquote><h3 id="fill-array-value-start-0-end-array-length"><a href="#fill-array-value-start-0-end-array-length" class="headerlink" title="_.fill(array, value, [start=0], [end=array.length])"></a><code>_.fill(array, value, [start=0], [end=array.length])</code></h3><blockquote><p>Fills elements of array with value from start up to, but not including, end. (用指定的值填充数组，从 start 到 end 的位置，但不包括 end 本身的位置。 )</p></blockquote><p><code>concat()</code>    连接两个或更多的数组，并返回结果。<br><code>copyWithin()</code>    从数组的指定位置拷贝元素到数组的另一个指定位置中。<br><code>every()</code>    检测数值元素的每个元素是否都符合条件。<br><code>fill()</code> 使用一个固定值来填充数组。<br><code>filter()</code>    检测数值元素，并返回符合条件所有元素的数组。<br><code>find()</code>    返回符合传入测试（函数）条件的数组元素。<br><code>findIndex()</code>    返回符合传入测试（函数）条件的数组元素索引。<br><code>forEach()</code>    数组每个元素都执行一次回调函数。<br><code>indexOf()</code>    搜索数组中的元素，并返回它所在的位置。<br><code>join()</code>    把数组的所有元素放入一个字符串。<br><code>lastIndexOf()</code> 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。<br><code>map()</code>    通过指定函数处理数组的每个元素，并返回处理后的数组。<br><code>pop()</code>    删除数组的最后一个元素并返回删除的元素。<br><code>push()</code>    向数组的末尾添加一个或更多元素，并返回新的长度。<br><code>reduce()</code>将数组元素计算为一个值（从左到右）。<br><code>reduceRight()</code>    将数组元素计算为一个值（从右到左）。<br><code>reverse()</code>     反转数组的元素顺序。<br><code>shift()</code>    删除并返回数组的第一个元素。<br><code>slice()</code>    选取数组的的一部分，并返回一个新数组。<br><code>some()</code>    检测数组元素中是否有元素符合指定条件。<br><code>sort()</code>    对数组的元素进行排序。<br><code>splice()</code>    从数组中添加或删除元素。<br><code>toString()</code>    把数组转换为字符串，并返回结果。<br><code>unshift()</code>    向数组的开头添加一个或更多元素，并返回新的长度。<br><code>valueOf()</code>    返回数组对象的原始值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;slice-array-start-0-end-array-length&quot;&gt;&lt;a href=&quot;#slice-array-start-0-end-array-length&quot; class=&quot;headerlink&quot; title=&quot;_.slice(array, [star
      
    
    </summary>
    
      <category term="Lodash" scheme="https://nirodu.com/categories/Lodash/"/>
    
      <category term="es6" scheme="https://nirodu.com/categories/Lodash/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>子弹笔记简述</title>
    <link href="https://nirodu.com/201710/%E5%AD%90%E5%BC%B9%E7%AC%94%E8%AE%B0%E7%AE%80%E8%BF%B0/"/>
    <id>https://nirodu.com/201710/子弹笔记简述/</id>
    <published>2017-10-30T02:56:53.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>为了合理高效的日程计划和记录平日的想法，我花了一些时间去收集比较网上的一些笔记术，最后发现了它。</p><p>简洁，灵活，能根据每日的不同调整笔记的页幅。</p><p>需要的是耐心下来，花个十多分钟，掌握这套笔记的框架，并不复杂。</p><p>（建议使用方格本/点点本，便于笔记的区域划分和整洁。）</p><hr><h2 id="快速记录"><a href="#快速记录" class="headerlink" title="快速记录"></a>快速记录</h2><p>在子弹笔记中，快速记录的意思就是「写」。它由四部分组成：主题、页码、短句和项目符号（子弹）。</p><h2 id="主题和页码"><a href="#主题和页码" class="headerlink" title="主题和页码"></a>主题和页码</h2><p>快速记录的第一步是在页面的外边角写上主题。</p><p>主题就是简短的描述性标题。写主题的时候要稍微考虑下，毕竟它会帮助你阐明录入的内容。</p><p>完成后，再写下页码。要养成这样的习惯，在正式录入前先写下标题和页码。</p><p><img src="/img/bulletJournal/1.jpg" alt="1"></p><h2 id="项目符号，分成三类：任务、事件和笔记。"><a href="#项目符号，分成三类：任务、事件和笔记。" class="headerlink" title="项目符号，分成三类：任务、事件和笔记。"></a>项目符号，分成三类：任务、事件和笔记。</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>任务用一个简单的点「•」来表示，可以用作任何可执行的条目，例如「取干洗的衣服」。在子弹笔记中，任务符号有一些繁重的操作，它有三种状态：</p><ul><li><p><code>X</code>   任务完成</p></li><li><p><code>&gt;</code>   任务被转移</p></li><li><p><code>&lt;</code>   任务已被安排到日程中</p></li></ul><p><img src="/img/bulletJournal/2.jpg" alt="2"></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件用符号「O」来表示。事件是有日期要求的笔记，可以被放入日程当中（例如：「老王的生日」），也可以是事情发生之后才做的记录（例如「签订租约」）。</p><p>快速录入时，无论你对正要录入的事件有多大的意见和情绪，都尽可能的保持录入的内容简洁、客观。例如「夜场电影」与「最好的朋友搬走了」相比，二者所承载的信息是同等的。话虽如此，一旦你记下了事件，你可以在下一页随心所欲的去写关于这件事的内容，想写多少写多少。</p><p><img src="/img/bulletJournal/3.jpg" alt="3"></p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>笔记用破折号「—」来表示。笔记包括：对事实的记录、新的主意、想法和评论。笔记是一些你想要记住的内容，但并不紧急，或者不一定需要采取行动。这种符号可以用来记录一些会议、讲座和课堂笔记。</p><p><img src="/img/bulletJournal/4.jpg" alt="4"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符是一种符号，可以给条目添加额外的上下文。</p><p><strong>重要</strong></p><p>用「*」来表示，标记的任务将获得更高的优先级。放在项目符号的左侧，这样你就能快速找到重要的笔记。</p><p><strong>灵感</strong></p><p>用感叹号「!」表示，通常用在普通的笔记上。常用用标记新的想法、个人箴言、以及对事物的真知灼见。</p><p><strong>探索</strong></p><p>用一个眼睛表示，用于表示需要深入研究的笔记。</p><p><img src="/img/bulletJournal/5.jpg" alt="5"></p><h2 id="框架：四种核心模块：目录索引、未来记录、月度记录、每日记录。"><a href="#框架：四种核心模块：目录索引、未来记录、月度记录、每日记录。" class="headerlink" title="框架：四种核心模块：目录索引、未来记录、月度记录、每日记录。"></a>框架：四种核心模块：目录索引、未来记录、月度记录、每日记录。</h2><h3 id="目录索引"><a href="#目录索引" class="headerlink" title="目录索引"></a>目录索引</h3><p>把笔记本的前几页当作是索引，索引就是子弹笔记聚合的地方。</p><p>在使用笔记本的时候，简单的把集合的标题和页码加入到索引单中，需要的时候你可以通过索引快速查找。</p><p>集合是连续的几个页面的索引，例如「话题名称：5-10」。</p><p><strong>有些集合可能会重复出现在子弹笔记的不同地方。这些话题可以这样索引「话题名称：5-10，23，34-39，…」</strong></p><p><img src="/img/bulletJournal/6.jpg" alt="6"></p><h3 id="未来记录"><a href="#未来记录" class="headerlink" title="未来记录"></a>未来记录</h3><p>这个集合里所包含条目，是你预先安排到每个月的，或者你不确定要在哪天去做的。</p><p>利用图表来设置展望记录，图表中包含了你需要设置的所有月份。你可以像图中那样，用两条水平线来等分笔记本的两个页面，这样就有了一份六个月的日历。</p><p><img src="/img/bulletJournal/7.jpg" alt="7"></p><h3 id="月度记录"><a href="#月度记录" class="headerlink" title="月度记录"></a>月度记录</h3><p>月度记录就是帮助你整理你这个月要做的事情。</p><p><strong>它包含一份日历和任务清单</strong>。</p><p>要设置首个阅读记录，翻到全新的一个页面，左侧的页面当作日历页面，右侧的当作任务页面。</p><p>日历可以让你鸟瞰整个月份。这样设置：当月的月份来作为标题。然后在左侧边列出当月的所有日期，紧接着日期的右侧写上星期几。如果 14 号是周一，那么可以写作「14 一」。<strong>日期不要太靠左边，留出空间来添加标识符。</strong></p><p>你可以用日历页面来安排事件和任务，或者事后记录事件。这里的笔记要尽可能的简短，这个页面仅用来参考。</p><p>任务页面包括你想要在本月完成的任务，以及上个月未完成的任务。</p><p><img src="/img/bulletJournal/8.jpg" alt="8"></p><h3 id="每日记录"><a href="#每日记录" class="headerlink" title="每日记录"></a>每日记录</h3><p>每日记录就是用来记录每一天的。在页码的顶部，写下当天的日期当作标题。在这一天中，使用快速记录来写下你的任务、事件和笔记。如果这一页没写完，那就接着写下明天的日期，记录明天的笔记。</p><p><strong>小Tips：不要创建往后几天的笔记。尽在当天或者前一晚创建。因为你无法预知你将要预留多少空间给那天。</strong></p><p><img src="/img/bulletJournal/9.jpg" alt="9"></p><h2 id="笔记内容可以被转迁移，是子弹笔记的精髓。"><a href="#笔记内容可以被转迁移，是子弹笔记的精髓。" class="headerlink" title="笔记内容可以被转迁移，是子弹笔记的精髓。"></a>笔记内容可以被转迁移，是子弹笔记的精髓。</h2><p>在你开始第二个月的笔记时，回头去看看上个月的记录。看看是否有未完成的任务。对于已完成的任务打上「X」，接着评估未完成的任务是否还有必要继续下去。</p><p>如果任务已经不需要继续了，用横线直接划掉整个任务，包括项目符号。</p><p><strong>如果需要继续，那就推迟到下个月：把「•」换成「&gt;」，来表示你把任务推迟了，然后在新的月度记录中写下被推迟的任务。</strong></p><p>你同样可以转移已经安排到日程中的任务和事件。</p><p>当你开始新的月度记录时，从未来记录中把你想要在当月完成的任务放入当月的日程当中。</p><p>已经安排的任务，放在月度记录的日历页。</p><p><strong>看起来好像要不断的重复去写一些条目，但这是有意义的。这个过程让你停下来去思考每个项目。是否还要必要继续下去，如果项目不再重要，那就取消它。</strong></p><p><strong>迁移的目的，在于重新审视这件事情的价值，筛选出真正值得去做的事，反思我们自身的思考模式和习惯，于喧噪辨识出内心的声音。</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://bulletjournal.com/get-started/" target="_blank" rel="noopener">Getting Started - Bullet Journal</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了合理高效的日程计划和记录平日的想法，我花了一些时间去收集比较网上的一些笔记术，最后发现了它。&lt;/p&gt;
&lt;p&gt;简洁，灵活，能根据每日的不同调整笔记的页幅。&lt;/p&gt;
&lt;p&gt;需要的是耐心下来，花个十多分钟，掌握这套笔记的框架，并不复杂。&lt;/p&gt;
&lt;p&gt;（建议使用方格本/点点本
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记</title>
    <link href="https://nirodu.com/201708/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nirodu.com/201708/ES6学习笔记/</id>
    <published>2017-08-30T11:27:57.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>关于ES6的常用语法参考。</p><a id="more"></a><p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel官网</a><br>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p><h2 id="let-const"><a href="#let-const" class="headerlink" title="let, const"></a>let, const</h2><p><code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><h2 id="class-extends-super"><a href="#class-extends-super" class="headerlink" title="class, extends, super"></a>class, extends, super</h2><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line">animal.says(<span class="string">'hello'</span>) <span class="comment">//animal says hello</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'cat'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line">cat.says(<span class="string">'hello'</span>) <span class="comment">//cat says hello</span></span><br></pre></td></tr></table></figure><p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法。</p><p>constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p><p>Class之间可以通过extends关键字实现继承。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p><p><strong>super关键字，它指代父类的实例（即父类的this对象）。</strong><br>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><strong>这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</strong></p><h2 id="arrow-function"><a href="#arrow-function" class="headerlink" title="arrow function"></a>arrow function</h2><p>ES5和ES6写法对比：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">(i) =&gt; i + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">    x++;</span><br><span class="line">    y--;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//ES6</span></span><br><span class="line">(x, y) =&gt; &#123;x++; y--; <span class="keyword">return</span> x+y&#125;</span><br></pre></td></tr></table></figure><p><strong>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</strong></p><p>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></span><br></pre></td></tr></table></figure><p>内部等同于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">says(say)&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">   &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="template-string"><a href="#template-string" class="headerlink" title="template string"></a>template string</h2><p>当我们要插入大段的html内容到文档中时，传统的写法非常麻烦：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).append(</span><br><span class="line">  <span class="string">"There are &lt;b&gt;"</span> + basket.count + <span class="string">"&lt;/b&gt; "</span> +</span><br><span class="line">  <span class="string">"items in your basket, "</span> +</span><br><span class="line">  <span class="string">"&lt;em&gt;"</span> + basket.onSale +</span><br><span class="line">  <span class="string">"&lt;/em&gt; are on sale!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>而使用ES6的新特性模板字符串<code></code>后，我们可以直接这么来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p><code>${}</code> 引用变量<br>`用来标识起始</p><h2 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h2><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="attr">cat</span>: cat, <span class="attr">dog</span>: dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br></pre></td></tr></table></figure><p>反过来可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</span><br><span class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></span><br></pre></td></tr></table></figure></p><h2 id="default-rest"><a href="#default-rest" class="headerlink" title="default, rest"></a>default, rest</h2><p>default很简单，意思就是默认值。<br>例如调用<code>animal()方法</code>时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code>来指定默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure></p><p>如果用ES6我们而已直接这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000004365693#articleHeader5" target="_blank" rel="noopener">30分钟掌握ES6/ES2015核心内容</a></li><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于ES6的常用语法参考。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="https://nirodu.com/tags/ES6/"/>
    
      <category term="Javascript" scheme="https://nirodu.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>常用命令行记录</title>
    <link href="https://nirodu.com/201707/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%B0%E5%BD%95/"/>
    <id>https://nirodu.com/201707/常用命令行记录/</id>
    <published>2017-07-21T03:31:36.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>OSX上的一些常用命令。</p><a id="more"></a><h3 id="Mac端"><a href="#Mac端" class="headerlink" title="Mac端"></a>Mac端</h3><h4 id="将系统隐藏文件显示出来："><a href="#将系统隐藏文件显示出来：" class="headerlink" title="将系统隐藏文件显示出来："></a>将系统隐藏文件显示出来：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.Finder AppleShowAllFiles YES </span><br><span class="line">$ killall Finder</span><br></pre></td></tr></table></figure><h4 id="在Finder顶部看见完整的路径地址"><a href="#在Finder顶部看见完整的路径地址" class="headerlink" title="在Finder顶部看见完整的路径地址"></a>在Finder顶部看见完整的路径地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</span><br></pre></td></tr></table></figure><p>『复制路径可以用 Option+Command+C』 在终端中 Command+V 粘贴即可。</p><h4 id="安全和隐私-调出“任何来源”"><a href="#安全和隐私-调出“任何来源”" class="headerlink" title="安全和隐私-调出“任何来源”"></a>安全和隐私-调出“任何来源”</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><h4 id="查看当前目录下各个文件和子目录各占多少空间"><a href="#查看当前目录下各个文件和子目录各占多少空间" class="headerlink" title="查看当前目录下各个文件和子目录各占多少空间"></a>查看当前目录下各个文件和子目录各占多少空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><h4 id="使用sips命令批量处理图片。"><a href="#使用sips命令批量处理图片。" class="headerlink" title="使用sips命令批量处理图片。"></a>使用sips命令批量处理图片。</h4><p>如果你想批量修改一批图片（尺寸、旋转、反转等），但是你不会或没有PS，怎么办呢？使用sips命令可以高效完成这些功能，例如：</p><p>把当前用户图片文件夹下的所有JPG图片宽度缩小为800px，高度按比例缩放<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -Z 800 ~/Pictures/*.JPG</span><br></pre></td></tr></table></figure></p><p>顺时针旋转90˚<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -r 90 ~/Pictures/*.JPG</span><br></pre></td></tr></table></figure></p><p>垂直反转<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -f vertical ~/Pictures/*.JPG</span><br></pre></td></tr></table></figure></p><p>更多命令可以用sips -h查看</p><h4 id="系统默认截图格式是png，你可以通过如下命令修改截图文件类型，例如："><a href="#系统默认截图格式是png，你可以通过如下命令修改截图文件类型，例如：" class="headerlink" title="系统默认截图格式是png，你可以通过如下命令修改截图文件类型，例如："></a>系统默认截图格式是png，你可以通过如下命令修改截图文件类型，例如：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture <span class="built_in">type</span> -string JPEG</span><br></pre></td></tr></table></figure><h4 id="mdfind是一个非常灵活的全局搜索命令，类似Spotlight的命令行模式，可以在任何目录执行文件名、文件内容进行检索，例如："><a href="#mdfind是一个非常灵活的全局搜索命令，类似Spotlight的命令行模式，可以在任何目录执行文件名、文件内容进行检索，例如：" class="headerlink" title="mdfind是一个非常灵活的全局搜索命令，类似Spotlight的命令行模式，可以在任何目录执行文件名、文件内容进行检索，例如："></a>mdfind是一个非常灵活的全局搜索命令，类似Spotlight的命令行模式，可以在任何目录执行文件名、文件内容进行检索，例如：</h4><p>搜索文件内容或文件名包含Sword的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind Sword</span><br></pre></td></tr></table></figure></p><p>在桌面上搜索文件内容或文件名包含Sword的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -onlyin ~/Desktop Sword</span><br></pre></td></tr></table></figure></p><p>统计搜索到的结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -count -onlyin ~/Desktop Sword</span><br></pre></td></tr></table></figure></p><p>搜索文件名包含Sword的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name Sword</span><br></pre></td></tr></table></figure></p><p>查看本机IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure></p><h4 id="打开终端输入history，所有的历史命令都会显示出来，想找某一条执行过的命令，还可以这样："><a href="#打开终端输入history，所有的历史命令都会显示出来，想找某一条执行过的命令，还可以这样：" class="headerlink" title="打开终端输入history，所有的历史命令都会显示出来，想找某一条执行过的命令，还可以这样："></a>打开终端输入history，所有的历史命令都会显示出来，想找某一条执行过的命令，还可以这样：</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span>|grep apache</span><br></pre></td></tr></table></figure><p> 找到左边的命令编号（例如时1001），在终端输入<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!1001</span><br></pre></td></tr></table></figure></p><p> 就可以执行原来那条命令了。</p><h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><h4 id="单个sass文件编译"><a href="#单个sass文件编译" class="headerlink" title="单个sass文件编译"></a>单个sass文件编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sass style.scss style.css</span><br></pre></td></tr></table></figure><h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l  <span class="comment"># 列出文件夹内容(详情模式)</span></span><br><span class="line">$ ls -al  <span class="comment"># 列出文件夹内容(包括隐藏文件)</span></span><br><span class="line">$ touch &lt;file&gt;  <span class="comment"># 新建文件</span></span><br><span class="line">$ mkdir &lt;dir&gt;  <span class="comment"># 新建文件夹</span></span><br><span class="line">$ rm [-rf] &lt;file/dir&gt;  <span class="comment"># 删除文件</span></span><br><span class="line">$ mv &lt;<span class="built_in">source</span>&gt; &lt;target&gt;  <span class="comment"># 修改文件名字</span></span><br><span class="line">$ cp [-R] &lt;<span class="built_in">source</span>&gt; &lt;target&gt;  <span class="comment"># 复制文件</span></span><br><span class="line">$ ln -s  &lt;<span class="built_in">source</span>&gt; &lt;target&gt;  <span class="comment"># 建立符号链接</span></span><br><span class="line">$ rar x &lt;file&gt; <span class="comment">#解压</span></span><br><span class="line">$ tar -zxvf &lt;file&gt;</span><br><span class="line">$ unzip  &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R &lt;owner&gt;:&lt;group&gt;  &lt;file&gt;  <span class="comment"># 修改表文件ownership/group</span></span><br><span class="line">$ sudo chmod 600 &lt;file&gt;  <span class="comment"># 只有所有者有读和写的权限</span></span><br><span class="line">$ sudo chmod 644 &lt;file&gt;  <span class="comment"># 所有者有读和写的权限</span></span><br><span class="line">$ sudo chmod 700 &lt;file&gt;  <span class="comment"># 只有所有者有读和写以及执行的权限</span></span><br><span class="line">$ sudo chmod 666 &lt;file&gt;  <span class="comment"># 每个人都有读和写的权限</span></span><br><span class="line">$ sudo chmod 777 &lt;file&gt;  <span class="comment"># 开放全部权限</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat  <span class="comment"># 由第一行开始显示档案内容</span></span><br><span class="line">$ tac  <span class="comment"># 从最后一行开始显示，可以看出 tac 是 cat 的反向显示！</span></span><br><span class="line">$ nl  <span class="comment"># 显示的时候，随便输出行号！</span></span><br><span class="line">$ more  <span class="comment"># 一页一页的显示档案内容</span></span><br><span class="line">$ less  <span class="comment"># 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页！</span></span><br><span class="line">$ head  <span class="comment"># 查看头几行</span></span><br><span class="line">$ tail  <span class="comment"># 查看尾几行</span></span><br><span class="line">$ ctrl<span class="_">-a</span>  <span class="comment"># 在终端中跳到命令最前面</span></span><br><span class="line">$ ctrl<span class="_">-e</span>  <span class="comment"># 在终端中跳到命令最后面</span></span><br><span class="line">$ ctrl-x e <span class="comment"># 打开默认编辑器</span></span><br><span class="line">$ man &lt;something&gt; <span class="comment">#帮助</span></span><br><span class="line">$ !!  <span class="comment"># 上一条命令</span></span><br><span class="line">$ <span class="built_in">cd</span> -  <span class="comment"># 回到上一次目录</span></span><br><span class="line">$ <span class="built_in">pwd</span>  <span class="comment"># 查看路径</span></span><br><span class="line">$ ps -A | grep -i apache2  <span class="comment"># 查找相关进程</span></span><br><span class="line">$ <span class="built_in">kill</span> 1285 (to <span class="built_in">kill</span> the process apache2)  <span class="comment"># 杀死进程</span></span><br><span class="line">$ cal  <span class="comment"># 日历</span></span><br><span class="line">$ date  <span class="comment"># 日期</span></span><br><span class="line">$ bc  <span class="comment"># 计算器</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OSX上的一些常用命令。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bash" scheme="https://nirodu.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>网站收集</title>
    <link href="https://nirodu.com/201707/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    <id>https://nirodu.com/201707/网站收集/</id>
    <published>2017-07-21T02:08:39.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="Awwwards"><a href="#Awwwards" class="headerlink" title="Awwwards"></a><a href="https://www.awwwards.com/" target="_blank" rel="noopener">Awwwards</a></h4><p>一个专门为设计精美的网站以及富有创意的网站颁奖的网站，每天评选出一个“Site of the Day”，Awwwards上的获奖网站来自全世界优秀的网页设计师之手。</p><h4 id="CSS-Design-Awards-Website-Awards-amp-Inspiration-CSS-Gallery-CSSDA"><a href="#CSS-Design-Awards-Website-Awards-amp-Inspiration-CSS-Gallery-CSSDA" class="headerlink" title="CSS Design Awards - Website Awards &amp; Inspiration - CSS Gallery - CSSDA"></a><a href="https://www.cssdesignawards.com/" target="_blank" rel="noopener">CSS Design Awards - Website Awards &amp; Inspiration - CSS Gallery - CSSDA</a></h4><h4 id="Discover-the-world’s-best-design-practices—DesignBetter-Co"><a href="#Discover-the-world’s-best-design-practices—DesignBetter-Co" class="headerlink" title="Discover the world’s best design practices—DesignBetter.Co"></a><a href="https://www.designbetter.co/" target="_blank" rel="noopener">Discover the world’s best design practices—DesignBetter.Co</a></h4><h4 id="特效网站"><a href="#特效网站" class="headerlink" title="特效网站"></a>特效网站</h4><p><a href="https://www.lahautesociete.com/" target="_blank" rel="noopener">La Haute Société, agence de conseil en stratégie digitale.</a><br><a href="http://everylastdrop.co.uk/" target="_blank" rel="noopener">Every Last Drop – An Interactive Website about Water Saving</a></p><h4 id="设计师的元素周期表"><a href="#设计师的元素周期表" class="headerlink" title="设计师的元素周期表"></a><a href="http://foxcodex.html.xdomain.jp/index.html" target="_blank" rel="noopener">设计师的元素周期表</a></h4><h4 id="设计导航"><a href="#设计导航" class="headerlink" title="设计导航"></a><a href="http://hao.shejidaren.com/" target="_blank" rel="noopener">设计导航</a></h4><h4 id="ui设计导航"><a href="#ui设计导航" class="headerlink" title="ui设计导航"></a><a href="http://hao.uisdc.com/" target="_blank" rel="noopener">ui设计导航</a></h4><h4 id="图虫-摄影图"><a href="#图虫-摄影图" class="headerlink" title="图虫-摄影图"></a><a href="https://tuchong.com/explore/" target="_blank" rel="noopener">图虫-摄影图</a></h4><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><p><a href="https://materialdesignicons.com/" target="_blank" rel="noopener">material design icons</a><br><a href="http://glyphicons.com/" target="_blank" rel="noopener">glyphicons</a><br><a href="http://ionicons.com/" target="_blank" rel="noopener">ionicons</a><br><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">fontawesome</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;Awwwards&quot;&gt;&lt;a href=&quot;#Awwwards&quot; class=&quot;headerlink&quot; title=&quot;Awwwards&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.awwwards.com/&quot; target=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="web" scheme="https://nirodu.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JS - 代码封装集</title>
    <link href="https://nirodu.com/201707/JS-%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85%E9%9B%86/"/>
    <id>https://nirodu.com/201707/JS-代码封装集/</id>
    <published>2017-07-20T14:13:56.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>(正在整理中..</p><a id="more"></a><h4 id="微信JS-SDK调用方式"><a href="#微信JS-SDK调用方式" class="headerlink" title="微信JS-SDK调用方式"></a>微信JS-SDK调用方式</h4><p><a href="http://203.195.235.76/jssdk/" target="_blank" rel="noopener">在线微信JS-SDK Demo</a></p><p><a href="http://demo.open.weixin.qq.com/jssdk/" target="_blank" rel="noopener">备用地址：在线微信JS-SDK Demo</a></p><h4 id="jquery如何判断滚动条滚到页面底部并执行事件"><a href="#jquery如何判断滚动条滚到页面底部并执行事件" class="headerlink" title="jquery如何判断滚动条滚到页面底部并执行事件"></a>jquery如何判断滚动条滚到页面底部并执行事件</h4><p>首先理解三个dom元素，分别是：<code>clientHeight</code>、<code>offsetHeight</code>、<code>scrollTop</code>。</p><p><strong>举例，如果一个DIV高度是400px（即clientHeight为400），而里面的内容是一个很长的列表，内容的高度是1000px（即offsetHeight为1000）。那么，可见部分我们看到400px，1000px的内容中还有600px不可见。而这不可见的部分呢，正是我们通过拉动滚动条才能把这一部分显示出来。你如果滚动条不拉动，此时scrollTop为0，如果你把滚动条拉到底，显示出列表最下面的部分，此时，scrollTop为600。</strong><br><strong>所以scrollTop的取值区间为[0, 600]。　所以这个600可以理解为滚动条可以滚动的长度。</strong></p><p>首先，我们拉动滚动条，从最上面拉到最下面，变化的是scrollTop的值，而这个值是有一个区间的。</p><p>这个区间是：<strong>[0, (offsetHeight - clientHeight)]</strong></p><p>即，滚动条拉动的整个过程的变化在 0 到 (offsetHeight – clientHeight) 范围之内。</p><p>1、判断滚动条滚动到最底端：scrollTop == (offsetHeight – clientHeight)</p><p>2、在滚动条距离底端50px以内：(offsetHeight – clientHeight) – scrollTop &lt;= 50</p><p>3、在滚动条距离底端5%以内：scrollTop / (offsetHeight – clientHeight) &gt;= 0.95</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scrollBottomTest =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     $(<span class="string">"#contain"</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">         <span class="keyword">var</span> $<span class="keyword">this</span> =$(<span class="keyword">this</span>),  </span><br><span class="line">         viewH = $(<span class="keyword">this</span>).height(),<span class="comment">//可见高度  </span></span><br><span class="line">         contentH = $(<span class="keyword">this</span>).get(<span class="number">0</span>).scrollHeight,<span class="comment">//内容高度  </span></span><br><span class="line">         scrollTop = $(<span class="keyword">this</span>).scrollTop();<span class="comment">//滚动高度  </span></span><br><span class="line">        <span class="comment">//if(contentH - viewH - scrollTop &lt;= 100) &#123; //到达底部100px时,加载新内容  </span></span><br><span class="line">        <span class="keyword">if</span>(scrollTop/(contentH -viewH)&gt;=<span class="number">0.95</span>)&#123; <span class="comment">//到达底部5%以内,加载新内容  </span></span><br><span class="line">        <span class="comment">// 这里加载数据..  </span></span><br><span class="line">        &#125;  </span><br><span class="line">     &#125;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="/demo/rocket/index.html">附DEMO-导航火箭</a></p><h4 id="js结合rem控制字体随着分辨率变化而变化"><a href="#js结合rem控制字体随着分辨率变化而变化" class="headerlink" title="js结合rem控制字体随着分辨率变化而变化"></a>js结合rem控制字体随着分辨率变化而变化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deviceWidth = $(<span class="built_in">document</span>).width();</span><br><span class="line">    <span class="keyword">if</span> (deviceWidth &gt; <span class="number">640</span>) &#123;</span><br><span class="line">        deviceWidth = <span class="number">640</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fontSize = deviceWidth / <span class="number">6.4</span>;</span><br><span class="line">    $(<span class="string">"html"</span>).css(<span class="string">"fontSize"</span>, fontSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fontSize();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fontSize();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://www.qietu.com/html/f2/ntv2rem/" target="_blank" rel="noopener">demo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="built_in">window</span>).resize(infinite);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infinite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> htmlWidth = $(<span class="string">'html'</span>).width();</span><br><span class="line"><span class="keyword">if</span> (htmlWidth &gt;= <span class="number">750</span>) &#123;</span><br><span class="line">$(<span class="string">"html"</span>).css(&#123;</span><br><span class="line"><span class="string">"font-size"</span> : <span class="string">"40px"</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$(<span class="string">"html"</span>).css(&#123;</span><br><span class="line"><span class="string">"font-size"</span> :  <span class="number">40</span> / <span class="number">750</span> * htmlWidth + <span class="string">"px"</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    infinite();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"videoALL"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"video/01.mp4"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">poster</span>=<span class="string">"images/1.jpg"</span> /*视频封面*/</span></span><br><span class="line"><span class="tag">  <span class="attr">preload</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> /*这个属性是<span class="attr">ios</span> <span class="attr">10</span>中设置可以</span></span><br><span class="line"><span class="tag">                     让视频在小窗内播放，也就是不是全屏播放*/ </span></span><br><span class="line"><span class="tag">  <span class="attr">playsinline</span>=<span class="string">"true"</span>  /*<span class="attr">IOS</span>微信浏览器支持小窗内播放*/</span></span><br><span class="line"><span class="tag">  <span class="attr">x-webkit-airplay</span>=<span class="string">"allow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-player-type</span>=<span class="string">"h5"</span>  /*启用<span class="attr">H5</span>播放器,是<span class="attr">wechat</span>安卓版特性*/</span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-player-fullscreen</span>=<span class="string">"true"</span> /*全屏设置，</span></span><br><span class="line"><span class="tag">                     设置为 <span class="attr">true</span> 是防止横屏*/&gt;</span></span><br><span class="line">  x5-video-orientation="portraint" /*播放器支付的方向，</span><br><span class="line">                     landscape横屏，portraint竖屏，默认值为竖屏*/</span><br><span class="line">  style="object-fit:fill"&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://www.php.cn/html5-tutorial-362962.html" target="_blank" rel="noopener">HTML5实现微信播放全屏的方法详解</a></p><h4 id="回调函数应用"><a href="#回调函数应用" class="headerlink" title="回调函数应用"></a>回调函数应用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">go,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(go);</span><br><span class="line">    callback(<span class="string">"hahaha"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">called</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"回调函数已经调用"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用主方法并使用回调函数</span></span><br><span class="line">main(<span class="string">"goValue"</span>,called);</span><br></pre></td></tr></table></figure><h4 id="多行文本溢出显示省略号-…-的方法"><a href="#多行文本溢出显示省略号-…-的方法" class="headerlink" title="多行文本溢出显示省略号(…)的方法"></a>多行文本溢出显示省略号(…)的方法</h4><p>除了各个浏览器私有的属性，有没有跨浏览器的解决方法呢？当然是通过js实现啦！（通过从后向前逐个删除末尾字符，直至元素的高度小于父元素高度）</p><p>兼容性最好的方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"figcaption"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>作为微软的游戏平台，Xbox已经出现在了Windows Phone和Windows 8中，就在最近，微软宣布将旗下的Zune消费品牌也一并整合至Xbox品牌下，Xbox Live服务影响力越来越大，渗透面也越来越广。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"figcaption"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>You probably can't do it (currently?) without a fixed-width font like Courier. With a fixed-width font every letter occupies the same horizontal space, so you could probably count the letters and multiply the result with the current font size in ems or exs. Then you would just have to test how many letters fit on one line, and then break it up.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".figcaption"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> divH = $(<span class="keyword">this</span>).height();</span><br><span class="line">    <span class="keyword">var</span> $p = $(<span class="string">"p"</span>, $(<span class="keyword">this</span>)).eq(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// $("p", $(this)) 相当于 $(this).find("p") </span></span><br><span class="line">    <span class="keyword">while</span> ($p.outerHeight() &gt; divH) &#123;</span><br><span class="line">        $p.text($p.text().replace(<span class="regexp">/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/</span>, <span class="string">"..."</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.figcaption</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#EEE</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">410px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.figcaption</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三种阻止事件执行的方式"><a href="#三种阻止事件执行的方式" class="headerlink" title="三种阻止事件执行的方式"></a>三种阻止事件执行的方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()</span><br><span class="line">event.stopPropagation()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>event.preventDefault() 阻止特定事件的默认行为（只有 cancelable 设置为 true 的事件才可以使用），比如：点击 type=”submit” 的 input 标签提交表单，你在 onclick 事件处理中调用 event.preventDefault() 那么点击 submit 标签就不会提交表单了。不会阻止事件冒泡。</p><p>event.stopPropagation() 立即停止事件在 DOM 层次中的传播。不会阻止默认行为。</p><p>return false 之后的所有相关的触发事件和动作都不会被执行。<br>阻止事件继续传播，事件冒泡和默认行为都被阻止。</p><h4 id="获取屏幕高度宽度"><a href="#获取屏幕高度宽度" class="headerlink" title="获取屏幕高度宽度"></a>获取屏幕高度宽度</h4><p>屏幕分辨率的高： <code>window.screen.height</code><br>屏幕分辨率的宽：<code>window.screen.width</code></p><p>网页可见区域宽：<code>document.body.clientWidth</code><br>网页可见区域高：<code>document.body.clientHeight</code></p><h4 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 封装ajax函数</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125;opt.type http连接的方式，包括POST和GET两种方式</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125;opt.url 发送请求的url</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125;opt.async 是否为异步请求，true为异步的，false为同步的</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125;opt.data 发送的参数，格式为对象类型</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125;opt.success ajax发送并接收成功调用的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">        opt = opt || &#123;&#125;;</span><br><span class="line">        opt.method = opt.method.toUpperCase() || <span class="string">'POST'</span>;</span><br><span class="line">        opt.url = opt.url || <span class="string">''</span>;</span><br><span class="line">        opt.async = opt.async || <span class="literal">true</span>;</span><br><span class="line">        opt.data = opt.data || <span class="literal">null</span>;</span><br><span class="line">        opt.success = opt.success || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> xmlHttp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (XMLHttpRequest) &#123;</span><br><span class="line">            xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">        &#125;<span class="keyword">var</span> params = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opt.data)&#123;</span><br><span class="line">            params.push(key + <span class="string">'='</span> + opt.data[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> postData = params.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">if</span> (opt.method.toUpperCase() === <span class="string">'POST'</span>) &#123;</span><br><span class="line">            xmlHttp.open(opt.method, opt.url, opt.async);</span><br><span class="line">            xmlHttp.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>);</span><br><span class="line">            xmlHttp.send(postData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt.method.toUpperCase() === <span class="string">'GET'</span>) &#123;</span><br><span class="line">            xmlHttp.open(opt.method, opt.url + <span class="string">'?'</span> + postData, opt.async);</span><br><span class="line">            xmlHttp.send(<span class="literal">null</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xmlHttp.readyState == <span class="number">4</span> &amp;&amp; xmlHttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                opt.success(xmlHttp.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方式</span></span><br><span class="line">    ajax(&#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        url: <span class="string">'test.php'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name1: <span class="string">'value1'</span>,</span><br><span class="line">            name2: <span class="string">'value2'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="安卓机弹框-软键盘挡住输入框问题修复"><a href="#安卓机弹框-软键盘挡住输入框问题修复" class="headerlink" title="安卓机弹框 软键盘挡住输入框问题修复"></a>安卓机弹框 软键盘挡住输入框问题修复</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(<span class="regexp">/Android/</span>.test(navigator.appVersion)) &#123;</span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">document</span>.activeElement.tagName==<span class="string">"INPUT"</span> || <span class="built_in">document</span>.activeElement.tagName==<span class="string">"TEXTAREA"</span>) &#123;</span><br><span class="line">         <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.activeElement.scrollIntoViewIfNeeded();</span><br><span class="line">         &#125;,<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(正在整理中..&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://nirodu.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 代码封装集</title>
    <link href="https://nirodu.com/201707/CSS-%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85%E9%9B%86/"/>
    <id>https://nirodu.com/201707/CSS-代码封装集/</id>
    <published>2017-07-20T14:13:46.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>(正在整理中..</p><a id="more"></a><h4 id="一、CSS-哪些属性默认会继承-哪些不会继承"><a href="#一、CSS-哪些属性默认会继承-哪些不会继承" class="headerlink" title="一、CSS 哪些属性默认会继承, 哪些不会继承?"></a><strong>一、CSS 哪些属性默认会继承, 哪些不会继承?</strong></h4><p>1、不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。 </p><p>2、所有元素可继承：visibility和cursor。</p><p>3、内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。 </p><p>4、终端块状元素可继承：text-indent和text-align。 </p><p>5、列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</p><p>6、表格元素可继承：border-collapse。</p><h4 id="二、不定高垂直居中-灵活的不限定子元素高度"><a href="#二、不定高垂直居中-灵活的不限定子元素高度" class="headerlink" title="二、不定高垂直居中(灵活的不限定子元素高度)"></a><strong>二、不定高垂直居中(灵活的不限定子元素高度)</strong></h4><p>1、表格方式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.父 &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.子 &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、after伪元素 + vertical-align方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.父&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.父<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line">.子 &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文字省略号…"><a href="#文字省略号…" class="headerlink" title="文字省略号…"></a>文字省略号…</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应式rem-vw-组合"><a href="#响应式rem-vw-组合" class="headerlink" title="响应式rem + vw 组合"></a>响应式rem + vw 组合</h4><p>例：设计稿宽375px;</p><p>整个屏幕是100vw，假如设计稿是375px宽，且默认1rem为16px，且1rem为接下要使用的标准单位;</p><p>计算1rem等于多少vw(16px等于多少vw)：<br>16px : 375px = 4.266666666666667vw : 100vw;</p><p>再设置如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> all and (max-width: <span class="number">767px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">4.266666666666667vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后单位可统一用rem去写;</p><h4 id="横排多个item滚动"><a href="#横排多个item滚动" class="headerlink" title="横排多个item滚动"></a>横排多个item滚动</h4><p>只需要item定宽的写法：<br>四层div：爷、父、子、孙<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.爷 &#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line">.父 &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line">.子 &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line">.孙 &#123;</span><br><span class="line">    width: 12rem;//具体宽度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="多行文本溢出显示省略号-…-的方法-（建议通过JS去解决）"><a href="#多行文本溢出显示省略号-…-的方法-（建议通过JS去解决）" class="headerlink" title="多行文本溢出显示省略号(…)的方法 （建议通过JS去解决）"></a>多行文本溢出显示省略号(…)的方法 （建议通过JS去解决）</h4><p>两种非标准的方式<br><strong>-webkit-line-clamp</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">overflow </span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo: <a href="http://jsfiddle.net/Cople/maB8f/" target="_blank" rel="noopener">http://jsfiddle.net/Cople/maB8f/</a></p><p><strong>-o-ellipsis-lastline</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: normal;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: -o-ellipsis-lastline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Demo: <a href="http://jsfiddle.net/Cople/ash5v/" target="_blank" rel="noopener">http://jsfiddle.net/Cople/ash5v/</a></p><h4 id="类的通配"><a href="#类的通配" class="headerlink" title="类的通配"></a>类的通配</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class*="col-"]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#717171</span> transparent;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(正在整理中..&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://nirodu.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>微信表情 → 头像</title>
    <link href="https://nirodu.com/201707/%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85-%E5%A4%B4%E5%83%8F/"/>
    <id>https://nirodu.com/201707/微信表情-头像/</id>
    <published>2017-07-16T15:04:23.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下，操作微信表情解决头像荒。</p><a id="more"></a><style type="text/css">.tip {    position: relative;    margin: 2em 0;    padding: 12px 24px 12px 30px;    border-left: 4px solid #f66;    border-top-right-radius: 2px;    border-bottom-right-radius: 2px;    background-color: #f8f8f8;}.tip:before {    position: absolute;    top: 14px;    left: -12px;    content: "!";    width: 20px;    height: 20px;    border-radius: 100%;    color: #fff;    font-size: 14px;    line-height: 20px;    font-weight: bold;    text-align: center;    background-color: #f66;    font-family: 'Dosis', 'Source Sans Pro', 'Helvetica Neue', Arial, sans-serif;}</style><div class="tip">此乃花小微大王要求！！</div><p>花花和我打电话时突发奇想，想用微信表情包的图来换个头像。</p><p><img src="/img/wechatSticker/1.jpg" alt="wechatSticker1"></p><p>好，开始吧。微信客户端表情导出使用。（Mac版）</p><h2 id="1、进入微信客户端缓存文件夹"><a href="#1、进入微信客户端缓存文件夹" class="headerlink" title="1、进入微信客户端缓存文件夹"></a>1、进入微信客户端缓存文件夹</h2><p>mac上按下<code>command+shift+g</code>前往文件夹，输入以下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/</span><br></pre></td></tr></table></figure></p><p><img src="/img/wechatSticker/2.png" alt="wechatSticker2"></p><p>其中的<code>com.tencent.xinWeChat</code>就是微信客户端的所有信息文件保存位置了。</p><blockquote><p><strong>进入里面<code>2.0b4.0.9</code>(当前版本)→<code>Stickers</code>→<code>File</code>文件夹。</strong></p></blockquote><p>可见<code>File</code>文件夹下有特别多的无后缀名文件：</p><p><img src="/img/wechatSticker/4.png" alt="wechatSticker4"></p><p><strong>这些便是微信表情的文件了，将它们全部拷贝出来做处理。</strong></p><h2 id="2、对这些微信表情文件批量重命名"><a href="#2、对这些微信表情文件批量重命名" class="headerlink" title="2、对这些微信表情文件批量重命名"></a>2、对这些微信表情文件批量重命名</h2><p>打开终端，在命令行输入cd命令，进入拷贝的微信表情所在的文件夹目录。(可直接将目录拖到终端里，直接得到文件夹目录地址。)</p><p>再输入批量追加后缀名命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$i</span>"</span> <span class="string">"<span class="variable">$i</span>.gif"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>以上命令是对该目录下的所有文件重命名为<code>.gif</code>文件。</p><p>这样无后缀名文件就显示出来了。<br><img src="/img/wechatSticker/3.png" alt="wechatSticker3"></p><p>双击打开gif图片，选取其中喜欢的一张静态图片就可以啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录下，操作微信表情解决头像荒。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="生活" scheme="https://nirodu.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>✡ Hexo 使用 Travis 自动化构建+部署</title>
    <link href="https://nirodu.com/201706/Hexo%E4%BD%BF%E7%94%A8Travis%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA+%E9%83%A8%E7%BD%B2/"/>
    <id>https://nirodu.com/201706/Hexo使用Travis自动化构建+部署/</id>
    <published>2017-06-11T01:38:00.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>把本地构建和部署的工作交给线上的 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis</a> 的服务器去做，实现不管在哪台电脑上都可以直接从仓库下载源码去编辑，实时更新自己的博客。</p><a id="more"></a><h2 id="自动化构建-部署概述："><a href="#自动化构建-部署概述：" class="headerlink" title="自动化构建+部署概述："></a><strong>自动化构建+部署概述：</strong></h2><p>Travis 会在你每一次 git 提交之后会生成一个虚拟环境来执行我们编写的脚本任务，脚本执行的内容写在<code>.travis.yml</code>文件中。</p><p>这样只要你使用 git 提交了更改，就可以让 Travis 在线上替你执行 <code>Hexo generate</code>+<code>Hexo deploy</code> 的命令，如此一来，我们在不同的电脑上想要编辑博客，只需使用 Markdown 工具写好 <code>.md</code> 文件，使用 git 上传博客的源文件，其他的就交给 Travis，让它去获取 github 仓库上代码的更新并拉取，执行脚本任务：“部署博客内容，并完成更新上线。”</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h2><p>在操作前需要先熟悉三个方面的知识点。</p><h3 id="1、HEXO命令"><a href="#1、HEXO命令" class="headerlink" title="1、HEXO命令"></a><strong>1、HEXO命令</strong></h3><p>可在此了解 <a href="/2017/03/10/Hexo初入记载/" target="_blank">Hexo 初入记载</a></p><h3 id="2、GIT命令"><a href="#2、GIT命令" class="headerlink" title="2、GIT命令"></a><strong>2、GIT命令</strong></h3><p>可在此了解 <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank">Git远程操作详解</a></p><h3 id="3、SSH-Key"><a href="#3、SSH-Key" class="headerlink" title="3、SSH Key"></a><strong>3、SSH Key</strong></h3><p>可在此了解 <a href="/2017/06/03/SSH-key/" target="_blank">SSH Key浅析</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a><strong>前提</strong></h2><p>在 github 仓库创建两个分支: 一个 <code>master</code>(用于部署，hexo构建后的网页代码) 和一个 <code>dev</code>(用于构建，博客的源码)。</p><p><img src="/img/Travis/branch.png" alt="Branch"></p><p><strong>以下配置都以 MAC OSX 系统为环境进行配置。</strong> </p><h2 id="第一步、配置SSH密钥"><a href="#第一步、配置SSH密钥" class="headerlink" title="第一步、配置SSH密钥"></a><strong>第一步、配置SSH密钥</strong></h2><h3 id="一-生成SSH密钥"><a href="#一-生成SSH密钥" class="headerlink" title="(一) 生成SSH密钥"></a>(一) 生成SSH密钥</h3><blockquote><p>使用SSH Key可免去在Github上Hexo部署时得输入密码，但要注意的是，这个SSH key不应是github账号的全局SSH key，因为这样Travis CI就获得了你所有代码库的提交权限。</p></blockquote><p>应该使用 <strong>单个项目的ssh密钥</strong>，添加至<code>https://github.com/用户名/项目名/settings/keys</code>的 Deploy keys，这样就限制了Travis CI的权限。</p><p>生成单个项目的ssh密钥命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"nirodu1219@outlook.com"</span></span><br></pre></td></tr></table></figure></p><p>在执行生成密钥的过程中会提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></p><p>其中，<u>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</u><br>假如直接按回车则会在默认的<code>.ssh/</code>目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>文件。</p><p>为了区别这是专为Travis生成的密钥，我们在这一步输入路径和文件名：<code>/Users/nirodu/.ssh/id_rsa_forTravic</code></p><p>然后会在<code>.ssh/</code>目录下生成<code>id_rsa_forTravic</code>和<code>id_rsa_forTravic.pub</code>两个文件。<br><br></p><h3 id="二-添加-SSH-Key-到项目的-Deploy-keys"><a href="#二-添加-SSH-Key-到项目的-Deploy-keys" class="headerlink" title="(二)  添加 SSH Key 到项目的 Deploy keys"></a>(二)  添加 SSH Key 到项目的 Deploy keys</h3><p>登录到 github 中，进入到博客仓库。<br>点击右上方的 <code>Settings</code> 进入到设置页面，再点击左侧 <code>Deploy keys</code> 项。</p><p>给 <strong>Title</strong> 取个名字，打开<code>id_rsa_forTravic.pub</code>文件，复制里面的内容到<strong>Key文本框</strong>，勾选 <strong>Allow write access</strong>，点击 <strong>Add key</strong> 确认添加。</p><p><img src="/img/Travis/deploy_keys.png" alt="Deploy keys"></p><p><br></p><h3 id="三-新建-SSH-配置文件"><a href="#三-新建-SSH-配置文件" class="headerlink" title="(三) 新建 SSH 配置文件"></a>(三) 新建 SSH 配置文件</h3><p>然后在 <code>.ssh/</code> 文件夹中创建一个名为 <code>config</code> 的配置文件。</p><blockquote><p><strong>配置 config 的作用：</strong><br>为不同网站应用各自的 SSH KEY。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ touch config</span><br></pre></td></tr></table></figure><p>用编辑器打开 <code>config</code> 文件，添加如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># github_blog</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_forTravic</span><br></pre></td></tr></table></figure><p>提示：这里的密钥文件会根据配置相应修改，把对应的公钥添加至对应的网站（host）上面。<br>未加入配置文件的网站会自动应用默认的<code>id_rsa</code>。</p><h2 id="第二步、配置-Travis"><a href="#第二步、配置-Travis" class="headerlink" title="第二步、配置 Travis"></a><strong>第二步、配置 Travis</strong></h2><h3 id="一-Travis-CI-官网配置"><a href="#一-Travis-CI-官网配置" class="headerlink" title="(一) Travis CI 官网配置"></a>(一) Travis CI 官网配置</h3><p>打开<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，使用github账号登录。</p><p>跟着 Travis 官网的提示，添加一个 Repositories，找到博客项目，开启 travis 支持。</p><p><img src="/img/Travis/add_repositories.png" alt="Add repositories"></p><p>然后点击设置按钮，在项目的设置中开启 <code>Build only if .travis.yml is present</code>.</p><h3 id="二-本地-Travis-CI-操作"><a href="#二-本地-Travis-CI-操作" class="headerlink" title="(二) 本地 Travis CI 操作"></a>(二) 本地 Travis CI 操作</h3><p><strong>（ 1 ）首先打开终端，安装travis（要先安装好Ruby和gem环境）。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install travis</span><br></pre></td></tr></table></figure><p><br></p><p><strong>（ 2 ）然后到博客项目文件夹，在</strong>项目根目录<strong>新建 <code>.travis.yml</code> 配置文件。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 博客项目文件夹根目录</span><br><span class="line">$ touch .travis.yml</span><br></pre></td></tr></table></figure><blockquote><p>有可能会提示：Names that begin with a dot “.” are reserved for the system.<br>  这是以 <code>.</code> 开头命名的文件在系统中是默认保留的，用这样的的命名方式的文件会自动隐藏。</p></blockquote><p>将系统隐藏文件显示出来也很简单，只需要在终端输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.Finder AppleShowAllFiles YES </span><br><span class="line">$ killall Finder</span><br></pre></td></tr></table></figure></p><p>即可显示系统隐藏文件，若想继续隐藏则把 “YES” 改成 “NO” 就行。<br><br></p><p><strong>（ 3 ）在博客项目文件夹，在</strong>项目根目录<strong>创建<code>.travis</code>文件夹。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir .travis</span><br></pre></td></tr></table></figure></p><p>把刚才在 <code>.ssh</code> 目录下生成的 <code>id_rsa_forTravic</code> 私钥复制到 <code>.travis文件夹</code> 下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ~/.ssh/id_rsa_forTravic .travis/</span><br></pre></td></tr></table></figure></p><p>然后新建SSH配置文件 <code>ssh_config</code> 到<code>.travis文件夹</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .travis/ssh_config</span><br></pre></td></tr></table></figure></p><p>编辑配置文件，添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p><div class="tip"><br>这个配置文件，是在线上 Travis 虚拟环境构建过程中使用的，路径不是本地机的，是以Travis虚拟机为根目录的路径。所以路径和名字可大胆命名为  <code>~/.ssh/id_rsa</code><br></div><p><strong>（ 4 ）Travis 加密操作</strong></p><blockquote><p>要加密的原因很简单，Travis 需要取得足够的权限才能对 Github仓库 进行操作，我们在博客仓库里添加过一个公钥 <code>id_rsa_forTravic.pub</code>，Travis需要取得私钥 <code>id_rsa_forTravic</code> 才能通过认证，进行构建部署。而假如直接把私钥文件上传到开源的Github上，被别人下载到未加密的私钥文件，那这个仓库的控制权就是共享的了…</p></blockquote><p>首先是用终端登录Travis账号，再使用命令对私钥进行加密。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis login --auto</span><br></pre></td></tr></table></figure></p><p>然后会提示输入github的用户名和密码。<br>或者是弹框请求允许读取信息，都选同意。</p><p><strong>加密操作（这一步容易出现各种问题，请按如下命令操作。）</strong></p><p>打开终端，进到 <code>.travis 文件夹</code>目录下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file id_rsa_forTravic --add -r NiroDu/nirodu.github.io</span><br></pre></td></tr></table></figure></p><blockquote><p><code>NiroDu/nirodu.github.io</code> 替换成你的 <code>账户名/博客仓库名</code>。</p></blockquote><p>执行后会在当前目录<code>.travis 文件夹</code>下生成加密之后的私钥文件 <code>id_rsa_forTravic.enc</code>，然后删除 <code>id_rsa_forTravic</code> 私钥文件（私钥不泄露）。</p><p>同时，在<code>.travis.yml</code>文件中会插入这么一个语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-256-cbc -K $encrypted_xxxxxxxxxxx_key -iv $encrypted_xxxxxxxxxxx_iv</span><br></pre></td></tr></table></figure></p><p>这是线上用来给<code>id_rsa_forTravic.enc</code>解密的信息。</p><p>执行完加密后，在Travis系统的设置中，多了Environment Variables，即解密用的两串信息。</p><p><img src="/img/Travis/travis_key.png" alt="travis_key"></p><h3 id="三-编辑-travis-yml配置文件"><a href="#三-编辑-travis-yml配置文件" class="headerlink" title="(三) 编辑.travis.yml配置文件"></a>(三) 编辑<code>.travis.yml</code>配置文件</h3><p>打开Travis配置文件 <code>.travis.yml</code>，添加执行脚本（虚拟机用）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">'6'</span>  <span class="comment"># nodejs的版本</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">dev</span> <span class="comment"># 设置博客源代码分支（检测这个分支有改动，则自动化部署到master分支）</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span> <span class="comment"># 设置时区</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo</span> <span class="comment"># 虚拟机安装hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 虚拟机安装hexo命令行工具</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_dc70c6c06754_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_dc70c6c06754_iv</span> <span class="bullet">-in</span> <span class="string">.travis/id_rsa_forTravic.enc</span> <span class="bullet">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="bullet">-d</span> <span class="comment"># 修改Travis自动插入的解密指令，将解密后的私钥导出在虚拟机中，即 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span> <span class="comment"># 设置id_rsa文件权限</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh-add</span> <span class="string">~/.ssh/id_rsa</span> <span class="comment"># 将密钥加入系统</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">.travis/ssh_config</span> <span class="string">~/.ssh/config</span> <span class="comment"># 将之前创建的ssh_config复制到Travis的虚拟机中去</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"NiroDu"</span> <span class="comment"># 设置github账户信息</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">nirodu1219@outlook.com</span></span><br><span class="line"><span class="attr">install:</span> <span class="comment"># 安装依赖组件</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 虚拟机安装依赖</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="bullet">--save</span> <span class="comment"># 虚拟机安装hexo-deployer-git插件，以解决hexo+git上传时容易出现的问题</span></span><br><span class="line"><span class="attr">script:</span> <span class="comment"># 执行的命令</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="bullet">-d</span> <span class="comment"># 虚拟机执行生成&amp;部署命令</span></span><br></pre></td></tr></table></figure><h3 id="至此-Travis-配置完成。"><a href="#至此-Travis-配置完成。" class="headerlink" title="至此 Travis 配置完成。"></a><strong>至此 Travis 配置完成。</strong></h3><h2 id="第三步、Git-Hexo-其余配置"><a href="#第三步、Git-Hexo-其余配置" class="headerlink" title="第三步、Git/Hexo 其余配置"></a><strong>第三步、Git/Hexo 其余配置</strong></h2><blockquote><p><strong>再强调一遍，也是网上教程令人困惑的地方。要实现Travis自动化构建，得在Github上创建两个分支:</strong><br>1、默认的master分支，用来存放hexo编译后的网页文件。<br>2、自定义命名的分支dev，用于存放hexo博客源码，并把它设置为xx.github.io博客仓库的默认分支，Github的push和pull都在这个分支进行。<br>并且 dev 分支由 Travis 检测，一旦有改动，Travis 会自动拉取 dev 中的代码进行自动化构建+部署。</p></blockquote><p>所以，在博客根目录下的<code>_config.yml</code>文件中deploy配置的分支是master：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:NiroDu/nirodu.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><p>在<code>.travis.yml</code>中配置的分支是dev：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></p><h3 id="（一）-构建博客目录"><a href="#（一）-构建博客目录" class="headerlink" title="（一） 构建博客目录"></a>（一） 构建博客目录</h3><p>我是这样执行的：</p><p><strong>1、在Github创建好两个新的分支后。</strong></p><p><strong>2、拉取dev分支到本地:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:NiroDu/nirodu.github.io.git</span><br></pre></td></tr></table></figure></p><p>该操作会产生一个<code>nirodu.github.io</code>文件夹。</p><p><strong>3、新建一个文件夹<code>temp</code>并把它初始化为Hexo文件夹</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p><strong>4、再把里面的内容拷贝到<code>nirodu.github.io</code>文件夹。</strong></p><p>这么做的原因是<code>hexo init</code>命令会把整个文件夹初始化，会删掉的.git文件夹和git配置，导致无法正常用git进行pull和push。<br>保持<code>nirodu.github.io</code>文件夹不动，拷贝hexo的文件过来即可顺利上传博客源码文件。</p><h3 id="（二）-上传到Github"><a href="#（二）-上传到Github" class="headerlink" title="（二） 上传到Github"></a>（二） 上传到Github</h3><p>进入到博客根目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"travis upload"</span></span><br><span class="line">$ git push -u origin dev</span><br></pre></td></tr></table></figure><h3 id="（三）-到Travis执行后台查看构建生成情况。"><a href="#（三）-到Travis执行后台查看构建生成情况。" class="headerlink" title="（三） 到Travis执行后台查看构建生成情况。"></a>（三） 到<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis执行后台</a>查看构建生成情况。</h3><p>完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把本地构建和部署的工作交给线上的 &lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis&lt;/a&gt; 的服务器去做，实现不管在哪台电脑上都可以直接从仓库下载源码去编辑，实时更新自己的博客。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Travis" scheme="https://nirodu.com/tags/Travis/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑配置多个用户身份，多个SSH KEY</title>
    <link href="https://nirodu.com/201706/SSH-key/"/>
    <id>https://nirodu.com/201706/SSH-key/</id>
    <published>2017-06-03T01:38:00.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>关于SSH Key的一些配置操作。</p><a id="more"></a><h2 id="生成-SSH-KEY"><a href="#生成-SSH-KEY" class="headerlink" title="生成 SSH KEY"></a>生成 SSH KEY</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p><a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a> 改成自己的邮箱。</p><p>输入文件名，如果直接按回车则会默认自动生成私钥和公钥：id_rsa、id_rsa.pub。</p><p>接着跟着的是输入密码和确认密码。<br>密码输入成功后出现如下提示，表示创建成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">fingerprint值 your_email@example.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line"> +--[ RSA 2048]----+</span><br><span class="line"> | .+ + |</span><br><span class="line"> | =oO. |</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></p><p><strong>注意：<br>上方的命令执行多次则会生成多个 SSH KEY 文件。如下：</strong></p><h2 id="生成多个SSH-KEY的操作方式："><a href="#生成多个SSH-KEY的操作方式：" class="headerlink" title="生成多个SSH KEY的操作方式："></a>生成多个SSH KEY的操作方式：</h2><h3 id="新建第一个-SSH-key："><a href="#新建第一个-SSH-key：" class="headerlink" title="新建第一个 SSH key："></a>新建第一个 SSH key：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;user1@email.com&quot;</span><br></pre></td></tr></table></figure><p>一路回车即可，选择默认路径(~/.ssh)</p><h3 id="新建第二个-SSH-key"><a href="#新建第二个-SSH-key" class="headerlink" title="新建第二个 SSH key"></a>新建第二个 SSH key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;user2@email.com&quot;</span><br><span class="line"># 设置名称为Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): /指定一个路径/id_rsa_user2名称</span><br></pre></td></tr></table></figure><h2 id="查看-SSH-KEY"><a href="#查看-SSH-KEY" class="headerlink" title="查看 SSH KEY"></a>查看 SSH KEY</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa 公开密钥的内容 your_email@example.com</span><br></pre></td></tr></table></figure><p>如果创建时输入了文件名，上方的<code>id_rsa</code>替换成文件名。</p><h2 id="为不同网站应用各自的-SSH-KEY"><a href="#为不同网站应用各自的-SSH-KEY" class="headerlink" title="为不同网站应用各自的 SSH KEY"></a>为不同网站应用各自的 SSH KEY</h2><p>在 ~/.ssh 目录下创建 config 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></table></figure></p><p>输入以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 第一个host</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_a</span><br><span class="line"></span><br><span class="line"># 第二个host</span><br><span class="line">Host git.xxxxxx.com</span><br><span class="line">    HostName git.xxxxxx.net</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_b</span><br></pre></td></tr></table></figure></p><p>再把对应的公钥添加至对应的网站上面。<br>注解：未加入配置文件的网站会自动应用id_rsa。<br>至此，多个 SSH KEY 就可以同时使用了。</p><h2 id="GIT-CONFIG"><a href="#GIT-CONFIG" class="headerlink" title="GIT CONFIG"></a>GIT CONFIG</h2><p>像 github 或者 gitlab 等网站都会要求验证身份。通常情况下配置一个全局信息就可以了，针对一些特殊情况，如果需要配置多个身份信息，可以为项目单独配置。</p><p><strong>配置全局信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Firstname Lastname&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>这个命令会在   ~/.gitconfig   填入以下信息：</p><p>[user]<br>  name = Firstname Lastname<br>  email = <a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a></p><p>如果需要修改信息，直接修改这个文件即可。</p><p>另外，显示当前的git配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><strong>配置单独信息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd your_project</span><br><span class="line">$ git config user.name &quot;Firstname Lastname&quot;</span><br><span class="line">$ git config user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></p><p>这个命令会在项目目录下输出文件：/.git／config<br>这里设置的姓名和邮箱地址会用在 Git 的提交日志中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于SSH Key的一些配置操作。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Travis" scheme="https://nirodu.com/tags/Travis/"/>
    
      <category term="SSH" scheme="https://nirodu.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>WebVR</title>
    <link href="https://nirodu.com/201705/WebVR/"/>
    <id>https://nirodu.com/201705/WebVR/</id>
    <published>2017-05-25T09:17:18.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WebVR 是早期和实验性的 JavaScript API，它提供了访问如 Oculus Rift 和 Google Cardboard 等 VR 设备功能的 API。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VR 应用需要高精度、低延迟的接口，才能传递一个可接受的体验。而对于类似 Device Orientation Event 接口，虽然能获取浅层的 VR 输入，但这并不能为高品质的 VR 提供必要的精度要求。WebVR 提供了专门访问 VR 硬件的接口，让开发者能构建舒适的 VR 体验。</p><p>WebVR API 目前可用于安装了 Firefox nightly 的 Oculus Rift、Chrome 的实验性版本和 Samsung Gear VR 的浏览器。当然，如果你现在就想在你的移动端浏览器体验 WebVR，可以使用 <a href="https://github.com/googlevr/webvr-polyfill" target="_blank" rel="noopener">WebVR Polyfill</a> </p><h2 id="WebVR-开发"><a href="#WebVR-开发" class="headerlink" title="WebVR 开发"></a>WebVR 开发</h2><p>在 Web 上开发 VR 应用，有下面三种（潜在）方式：</p><ul><li>JavaScript, Three.js 与 监听设备方向（Device Orientation）</li><li>JavaScript, Three.js 与 WebVR</li><li>CSS 与 WebVR（仍处于非常早期阶段）</li></ul><h3 id="A-Frame"><a href="#A-Frame" class="headerlink" title="A-Frame"></a>A-Frame</h3><p>A-Frame 是一个通过 HTML 创建 VR 体验的开源 WebVR 框架。通过该框架构建的 VR 场景能兼容智能手机、PC、 Oculus Rift 和 HTC Vive。</p><p>A-Frame 让代码结构化。Three.js 的代码通常是松散的，A-Frame 在 Three.js 之上构建了一个声明式的实体组件系统（entity-component-system）。另外，组件能发布并分享出去，其它开发者能以 HTML 的形式进行使用。</p><p>A-Frame 的实例 <a href="http://codepen.io/mozvr/pen/BjygdO/" target="_blank" rel="noopener">DEMO</a><br><img src="/img/webvr/aframe.gif" alt="aframe"><br>实例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 引入aframe框架</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./aframe.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 球体 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-sphere</span> <span class="attr">position</span>=<span class="string">"0 1 -1"</span> <span class="attr">radius</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#EF2D5E"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sphere</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 盒（此处是立方体） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">depth</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4CC3D9"</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-box</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 圆柱 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-cylinder</span> <span class="attr">position</span>=<span class="string">"1 0.75 1"</span> <span class="attr">radius</span>=<span class="string">"0.5"</span> <span class="attr">height</span>=<span class="string">"1.5"</span> <span class="attr">color</span>=<span class="string">"#FFC65D"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-cylinder</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 平面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-plane</span> <span class="attr">rotation</span>=<span class="string">"-90 0 0"</span> <span class="attr">width</span>=<span class="string">"4"</span> <span class="attr">height</span>=<span class="string">"4"</span> <span class="attr">color</span>=<span class="string">"#7BC8A4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-plane</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- sky元用于为场景添加背景图或显示360度的全景图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">color</span>=<span class="string">"#ECECEC"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用于指定摄像机的位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">"0 0 4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-camera</span>&gt;</span><span class="tag">&lt;/<span class="name">a-camera</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="基本概念（以-Aframe-v0-3-版本为参考）："><a href="#基本概念（以-Aframe-v0-3-版本为参考）：" class="headerlink" title="基本概念（以 Aframe v0.3 版本为参考）："></a>基本概念（以 Aframe v0.3 版本为参考）：</h3><p><img src="/img/webvr/coordinate.jpg" alt="右手坐标系"></p><ul><li>该框架的三维坐标轴遵循<code>右手坐标系</code>，如上图。</li><li>场景的原点默认在视口底边的中点</li><li><code>position</code> 相当于 CSS3 中的 translate3d</li><li>以米为单位长度</li><li><code>height</code> 与 <code>width</code> 是正面的长和宽，depth表示深度（厚度）</li><li><code>rotation=”x y z”</code> 单位角度（°），拇指指向坐标轴的正方向，其余手指卷起来的方向就是该轴的旋转正方向。</li><li><code>color</code> 是材质颜色，默认是白色（#FFF）</li><li>在 PC 中，可通过鼠标与键盘 WSAD 进行交互</li></ul><p>A-Frame 官网：<a href="https://aframe.io/" target="_blank" rel="noopener">https://aframe.io/</a><br>A-Frame Blog：<a href="https://aframe.io/blog/" target="_blank" rel="noopener">https://aframe.io/blog/</a><br>Awesome A-Frame：<a href="https://github.com/aframevr/awesome-aframe" target="_blank" rel="noopener">https://github.com/aframevr/awesome-aframe</a></p><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><p><a href="https://www.beloola.com/" target="_blank" rel="noopener">Beloola</a>：Beloola 是一个基于 WebVR 的社交平台，它允许人们在同一个虚拟的空间上实时进行情感交流。<br><a href="https://sketchfab.com/" target="_blank" rel="noopener">Sketchfab</a>：Sketchfab 是一个不需任何插件即可在 Web 页面里嵌入交互式 3D 模型的服务网站。<br><a href="https://vizor.io/" target="_blank" rel="noopener">Vizor</a>：该网站提供了可视化编辑器，让任何人都能在浏览器上创建和分享他们的 VR 内容。<br><a href="http://vr.chromeexperiments.com/" target="_blank" rel="noopener">Chrome Experiments for Virtual Reality</a>：Chrome 团队提供的 6 个 VR 案例。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;WebVR 是早期和实验性的 JavaScript API，它提供了访问如 Oculus Rift 和 Google Cardboard 等 VR 设备功能的 API。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WebVR" scheme="https://nirodu.com/tags/WebVR/"/>
    
  </entry>
  
  <entry>
    <title>Hexo初入记载</title>
    <link href="https://nirodu.com/201703/Hexo%E5%88%9D%E5%85%A5%E8%AE%B0%E8%BD%BD/"/>
    <id>https://nirodu.com/201703/Hexo初入记载/</id>
    <published>2017-03-10T09:17:18.000Z</published>
    <updated>2018-10-19T07:35:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo预备式。</p><a id="more"></a><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo文档链接</a> </p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"></span><br><span class="line">$ hexo g -w   //简写并watching</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d    //简写</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），发现对站点的更改无论如何也不生效，可能需要运行该命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>将草稿(_drafts)里的文章发布到_posts中，显示出来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish post &lt;filename&gt;</span><br></pre></td></tr></table></figure></p><h2 id="使用技巧-问题解决"><a href="#使用技巧-问题解决" class="headerlink" title="使用技巧/问题解决"></a>使用技巧/问题解决</h2><h3 id="skip-render"><a href="#skip-render" class="headerlink" title="skip_render"></a>skip_render</h3><blockquote><p><strong>跳过指定文件的渲染，可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob</a> 表达式来匹配路径。</strong><br><strong>可以实现在hexo中添加自己定制的页面文件。</strong></p></blockquote><p>在博客根目录的<code>_config.yml</code>下配置。</p><ol><li><p>要跳过 <code>source</code> 目录下的 <code>单个文件skip.html</code><br>千万不要加上个 / 写成 /skip.html，这里只能填相对于source文件夹的相对路径。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">skip.html</span></span><br></pre></td></tr></table></figure></li><li><p>要忽略 <code>source</code> 下的 <code>skip文件夹下所有文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">skip/*</span></span><br></pre></td></tr></table></figure></li><li><p>要忽略<code>source</code>下的<code>skip文件夹下所有文件和目录</code>，可以这样配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">skip/**</span></span><br></pre></td></tr></table></figure></li><li><p>要忽略 <code>多个路径的文件或目录</code>，可以这样配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">skip.html</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">skip/*</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test/*</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="更新hexo-cli"><a href="#更新hexo-cli" class="headerlink" title="更新hexo-cli"></a>更新hexo-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="问题-本地server运行时文章尾部中文乱码"><a href="#问题-本地server运行时文章尾部中文乱码" class="headerlink" title="问题:本地server运行时文章尾部中文乱码"></a>问题:本地server运行时文章尾部中文乱码</h4><p>在<code>_config.yml</code>设置启用压缩可以避免这个问题。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="hexo-admin-一个本地可视化的markdown编辑器"><a href="#hexo-admin-一个本地可视化的markdown编辑器" class="headerlink" title="hexo-admin (一个本地可视化的markdown编辑器)"></a><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">hexo-admin</a> (一个本地可视化的markdown编辑器)</h3><p>进入hexo根目录执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br><span class="line">$ hexo server -d</span><br><span class="line">$ open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure></p><h2 id="如何写一个Hexo主题"><a href="#如何写一个Hexo主题" class="headerlink" title="如何写一个Hexo主题"></a>如何写一个Hexo主题</h2><p><a href="http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/" target="_blank" rel="noopener">Create an Hexo Theme</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo预备式。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://nirodu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="https://nirodu.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
